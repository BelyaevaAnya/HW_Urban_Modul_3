def print_params(a=1, b='строка', c=True):
    print(a, b, c)

# пустая функция выводит параметры заданные поумолчанию
print_params()  # => 1 строка True
# В данном вызове функции 1 параметр задан неявно и его значение передается 1 параметру функции(a)
print_params(5.5)  # => 5.5 строка True
# В данном вызове функции 2 параметра заданы неявно и их значения передаются
# 1 параметру функции(a) и 2 параметру(b) (по порядку)
print_params('Capibara', False)  # => Capibara False True
# Все параметры заданы неявно и передаются в функцию попорядку в каждый параметр(a, b и c)
print_params('Game', 45, 4.4)  # => Game 45 4.4
# print_params('Game', 45, 4.4, 5.5)  # Ошибка, так как введено больше параметров, чем ожидалось
# пример, как исправить ошибку:
print_params('Game', 45, [4.4, 5.5])  # => Game 45 [4.4, 5.5]
# Далее идут функции из задания в, которых параметры заданы явно, поэтому они работают,
# а параметры, которые заданы поумолчанию и не объявлены при вызове функции выводятся с заданными значениями
# в функции
# Параметр b задан явно, и его значение используемое при вызове соответсвенно меняется
print_params(b=25)  # => 1 25 True
# Параметр с задан явно, и его значение используемое при вызове соответсвенно меняется
# В данном случае тип переменной меняется(из-за динамической типизации) с булевого на список
# Поэтому данный вызов работает
print_params(c=[1, 2, 3])  # => 1 строка [1, 2, 3]


values_list = [1.2, True, 'string']
values_dict = {'a': (2.2, 1, 'args'), 'b': [False, None, True], 'c': 'Notstring(lie)'}
# Так как кол-во параметров в листе, соответсвует кол-ву параметров в функции
# Функция работает + (распоковка листа при вызове функции с помощью *,
# иначе лист воспринимался как параметр а работало)
print_params(*values_list)  # => 1.2 True string

# В случае работы со словарями важно, чтобы поля ключи словаря и название парамеров функции совпадали
# В данном случаеэто так, поэтому данный вызов функции раотает (+ распаковка **, иначе
# словарь воспринимался как параметр а работало)
print_params(**values_dict) # => (2.2, 1, 'args') [False, None, True] Notstring(lie)

values_list_2 = ['Мама', 123]
print_params(*values_list_2, 42)    # => Мама 123 42
# Вызов функции работает,
# Лист распоковываются и его 0 и 1 элементы принимают значения параметров а и b,
# а введенный при вызове функции параметр = 42, присваивается параметру с,
# т.к. в списке 2 элемента
# При отсутствии распоковки лист бы присваивался как 1 или нулевой элемент,
# а 42 как 2 или 1 элемент
# => ['Мама', 123] 42 True

#Пример для выполнения задания
values_list_2 = [54.32, 'Строка' ]
print_params(*values_list_2, 42)    # => 54.32 Строка 42