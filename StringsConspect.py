# Python: поиск подстроки, операции со строками. Как выполнять поиск в строке Python?
# В этой статье поговорим про строки в Python, особенности поиска, а также о том, как искать подстроку или символ в строке.
#
# Но сначала давайте вспомним основные методы для обработки строк в Python:
# • isalpha(str): если строка в Python включает в себя лишь алфавитные символы, возвращается True;
# • islower(str): True возвращается, если строка включает лишь символы в нижнем регистре;
# • isupper(str): True, если символы строки в Python находятся в верхнем регистре;
# • startswith(str): True, когда строка начинается с подстроки str;
# • isdigit(str): True, когда каждый символ строки — цифра;
# • endswith(str): True, когда строка в Python заканчивается на подстроку str;
# • upper(): строка переводится в верхний регистр;
# • lower(): строка переводится в нижний регистр;
# • title(): для перевода начальных символов всех слов в строке в верхний регистр;
# • capitalize(): для перевода первой буквы самого первого слова строки в верхний регистр;
# • lstrip(): из строки в Python удаляются начальные пробелы;
# • rstrip(): из строки в Python удаляются конечные пробелы;
# • strip(): из строки в Python удаляются и начальные, и конечные пробелы;
# • rjust(width): когда длина строки меньше, чем параметр width,
# слева добавляются пробелы, строка выравнивается по правому краю;
# • ljust(width): когда длина строки в Python меньше,
# чем параметр width, справа от неё добавляются пробелы для дополнения значения width,
# при этом происходит выравнивание строки по левому краю;
# • find(str[, start [, end]): происходит возвращение индекса подстроки в строку в Python.
# В том случае, если подстрока не найдена, выполняется возвращение числа -1;
# • center(width): когда длина строки в Python меньше, чем параметр width, слева и справа
# добавляются пробелы (равномерно) для дополнения значения width, причём происходит выравнивание строки по центру;
# • split([delimeter[, num]]): строку в Python разбиваем на подстроки в зависимости от разделителя;
# • replace(old, new[, num]): в строке одна подстрока меняется на другую;
# • join(strs): строки объединяются в одну строку, между ними вставляется определённый разделитель.

string = input("Введите какое-нибудь число: ")
if string.isnumeric():
    number = int(string)
    print(number)

string = "   привет мир!  "
string = string.strip()
print(string)  # привет мир!

print("iPhone 7:", "52000".rjust(10))
print("Huawei P10:", "36000".rjust(10))
# =>
# iPhone 7:      52000
# Huawei P10:      36000

# Чтобы в Python выполнить поиск в строке, используют метод find().
# Он имеет три формы и возвращает индекс 1-го вхождения подстроки в строку:
# • find(str): поиск подстроки str производится с начала строки и до её конца;
# • find(str, start): с помощью параметра start задаётся начальный индекс, и именно с него и выполняется поиск;
# • find(str, start, end): посредством параметра end задаётся конечный индекс, поиск выполняется до него.

welcome = "Hello world! Goodbye world!"
index = welcome.find("wor")
print(index)  # 6

# ищем с десятого индекса
index = welcome.find("wor", 10)
print(index)  # 21

# ищем с 10-го по 15-й индекс
index = welcome.find("wor", 10, 15)
print(index)  # -1

# Замена в строке
# Чтобы в Python заменить в строке одну подстроку на другую, применяют метод replace():
# • replace(old, new): подстрока old заменяется на new;
# • replace(old, new, num): параметр num показывает, сколько вхождений подстроки old требуется заменить на new.
#
# Пример замены в строке в Python:

phone = "+1-234-567-89-10"

# дефисы меняются на пробелы
edited_phone = phone.replace("-", " ")
print(edited_phone)  # +1 234 567 89 10

# дефисы удаляются
edited_phone = phone.replace("-", "")
print(edited_phone)  # +12345678910

# меняется только первый дефис
edited_phone = phone.replace("-", "", 1)
print(edited_phone)  # +1234-567-89-10
#
# Разделение на подстроки в Python
# Для разделения в Python используется метод split(). В зависимости от
# разделителя он разбивает строку на перечень подстрок. В роли разделителя
# в данном случае может быть любой символ либо последовательность символов.
# Этот метод имеет следующие формы:
# • split(): в роли разделителя применяется такой символ, как пробел;
# • split(delimeter): в роли разделителя применяется delimeter;
# • split(delimeter, num): параметром num указывается, какое количество
# вхождений delimeter применяется для разделения.
# При этом оставшаяся часть строки добавляется в перечень без разделения на подстроки.

# Соединение строк в Python
# Рассматривая простейшие операции со строками, мы увидели, как объединяются строки через операцию сложения.
# Однако есть и другая возможность для соединения строк — метод join():,
# объединяющий списки строк. В качестве разделителя используется текущая строка, у которой вызывается этот метод:
words = ["Let", "me", "speak", "from", "my", "heart", "in", "English"]

# символ разделителя - пробел
sentence = " ".join(words)
print(sentence)  # Let me speak from my heart in English

# символ разделителя - вертикальная черта
sentence = " | ".join(words)
print(sentence)  # Let | me | speak | from | my | heart | in | English

# А если вместо списка в метод join передать простую строку, разделитель будет вставляться уже между символами:

word = "hello"
joined_word = "|".join(word)
print(joined_word)      # h|e|l|l|o
